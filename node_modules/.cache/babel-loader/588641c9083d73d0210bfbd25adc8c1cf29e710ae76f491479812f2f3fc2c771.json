{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrey\\\\Downloads\\\\pong_canvas_app\\\\src\\\\Pong.js\";\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { createAssistant, createSmartappDebugger } from '@salutejs/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initializeAssistant = (getState, getRecoveryState) => {\n  if (process.env.NODE_ENV === 'development') {\n    var _process$env$REACT_AP;\n    return createSmartappDebugger({\n      token: (_process$env$REACT_AP = process.env.REACT_APP_TOKEN) !== null && _process$env$REACT_AP !== void 0 ? _process$env$REACT_AP : '',\n      initPhrase: `Запусти ${process.env.REACT_APP_SMARTAPP}`,\n      getState,\n      nativePanel: {\n        defaultText: '',\n        screenshotMode: false,\n        tabIndex: -1\n      }\n    });\n  } else {\n    return createAssistant({\n      getState\n    });\n  }\n};\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleKeyDown = event => {\n      switch (event.key) {\n        case 'ArrowUp':\n          this.movePlayer('up');\n          break;\n        case 'ArrowDown':\n          this.movePlayer('down');\n          break;\n        case 'ArrowLeft':\n          this.movePlayer('left');\n          break;\n        case 'ArrowRight':\n          this.movePlayer('right');\n          break;\n        case 'h':\n        case 'H':\n          this.showHelp();\n          break;\n        default:\n          break;\n      }\n    };\n    this.showHelp = () => {\n      this.setState({\n        showHelpModal: true\n      });\n    };\n    this.closeHelp = () => {\n      this.setState({\n        showHelpModal: false\n      });\n    };\n    // Генерация нового лабиринта и начало игры\n    this.generateAndStart = () => {\n      console.log('Generating new maze and restarting...');\n      this.setState({\n        maze: this.generateMaze(),\n        player: {\n          x: 1,\n          y: 1\n        },\n        enemy: {\n          x: 10,\n          y: 12\n        }\n      });\n    };\n    this.state = {\n      notes: [{\n        id: Math.random().toString(36).substring(7),\n        title: 'тест'\n      }],\n      player: {\n        x: 1,\n        y: 1\n      },\n      enemy: {\n        x: 11,\n        y: 12\n      },\n      maze: this.generateMaze(),\n      // Генерация лабиринта\n      showHelpModal: false\n    };\n    this.assistant = initializeAssistant(() => this.getStateForAssistant());\n    this.assistant.on('data', event => {\n      var _event$navigation;\n      console.log(`assistant.on(data)`, event);\n      if (event.type === 'character') {\n        var _event$character;\n        console.log(`assistant.on(data): character: \"${event === null || event === void 0 ? void 0 : (_event$character = event.character) === null || _event$character === void 0 ? void 0 : _event$character.id}\"`);\n      } else if (event.type === 'insets') {\n        console.log(`assistant.on(data): insets`);\n      } else if (event.type === 'navigation' && (_event$navigation = event.navigation) !== null && _event$navigation !== void 0 && _event$navigation.command) {\n        // Обработка навигационной команды как действия\n        const navCommand = event.navigation.command.toLowerCase(); // например, 'RIGHT' → 'right'\n        this.dispatchAssistantAction({\n          type: navCommand\n        });\n      } else {\n        const {\n          action\n        } = event;\n        this.dispatchAssistantAction(action);\n      }\n    });\n    this.assistant.on('start', event => {\n      let initialData = this.assistant.getInitialData();\n      console.log(`assistant.on(start)`, event, initialData);\n    });\n    this.assistant.on('command', event => {\n      console.log(`assistant.on(command)`, event);\n    });\n    this.assistant.on('error', event => {\n      console.log(`assistant.on(error)`, event);\n    });\n    this.assistant.on('tts', event => {\n      console.log(`assistant.on(tts)`, event);\n    });\n  }\n\n  // Генерация лабиринта\n  generateMaze() {\n    console.log('Generating maze...');\n    const maze = Array.from({\n      length: rows\n    }, () => Array(cols).fill(1));\n\n    // Метод \"Дерево бинарного\" для создания путей\n    for (let y = 1; y < rows; y += 2) {\n      // Работаем только с нечетными строками\n      for (let x = 1; x < cols; x += 2) {\n        // Работаем только с нечетными столбцами\n        maze[y][x] = 0; // Делаем клетку проходимой (0)\n\n        const neighbors = [];\n        if (y > 1) neighbors.push([0, -1]); // Есть клетка выше\n        if (x > 1) neighbors.push([-1, 0]); // Есть клетка слева\n\n        if (neighbors.length) {\n          const [dx, dy] = neighbors[Math.floor(Math.random() * neighbors.length)];\n          maze[y + dy][x + dx] = 0; // Делаем соседнюю клетку проходимой\n        }\n      }\n    }\n\n    // Устанавливаем начальную и конечную точки проходимыми\n    maze[1][1] = 0; // Начальная позиция\n    maze[rows - 2][cols - 2] = 0; // Конечная точка\n\n    console.log('Generated maze:', maze);\n    return maze;\n  }\n\n  // Проверка состояния для ассистента\n  getStateForAssistant() {\n    console.log('getStateForAssistant: this.state:', this.state);\n    const state = {\n      item_selector: {\n        items: this.state.notes.map(({\n          id,\n          title\n        }, index) => ({\n          number: index + 1,\n          id,\n          title\n        }))\n      }\n    };\n    console.log('getStateForAssistant: state:', state);\n    return state;\n  }\n\n  // Двигаем игрока\n  movePlayer(direction) {\n    const {\n      x,\n      y\n    } = this.state.player;\n    let newPlayerPosition = {\n      x,\n      y\n    };\n    const maze = this.state.maze;\n    switch (direction) {\n      case 'up':\n        if (y > 0 && maze[y - 1][x] === 0) newPlayerPosition = {\n          x,\n          y: y - 1\n        };\n        break;\n      case 'down':\n        if (y < rows - 1 && maze[y + 1][x] === 0) newPlayerPosition = {\n          x,\n          y: y + 1\n        };\n        break;\n      case 'left':\n        if (x > 0 && maze[y][x - 1] === 0) newPlayerPosition = {\n          x: x - 1,\n          y\n        };\n        break;\n      case 'right':\n        if (x < cols - 1 && maze[y][x + 1] === 0) newPlayerPosition = {\n          x: x + 1,\n          y\n        };\n        break;\n      default:\n        break;\n    }\n    console.log('Moving player to:', newPlayerPosition);\n    this.setState({\n      player: newPlayerPosition\n    }, () => {\n      //Проверка победы после обновления состояния\n      if (newPlayerPosition.x === cols - 2 && newPlayerPosition.y === rows - 2) {\n        this.generateAndStart();\n      }\n      if (newPlayerPosition.x === this.state.enemy.x && newPlayerPosition.y === this.state.enemy.y) {\n        const newMaze = this.generateMaze();\n        this.setState({\n          maze: newMaze,\n          player: {\n            x: 1,\n            y: 1\n          },\n          enemy: {\n            x: 10,\n            y: 12\n          }\n        });\n      }\n    });\n  }\n  moveEnemy(direction) {\n    const {\n      x,\n      y\n    } = this.state.enemy;\n    let newEnemyPosition = {\n      x,\n      y\n    };\n    const maze = this.state.maze;\n    switch (direction) {\n      case 'up':\n        if (y > 0 && maze[y - 1][x] === 0) newEnemyPosition = {\n          x,\n          y: y - 1\n        };\n        break;\n      case 'down':\n        if (y < rows - 1 && maze[y + 1][x] === 0) newEnemyPosition = {\n          x,\n          y: y + 1\n        };\n        break;\n      case 'left':\n        if (x > 0 && maze[y][x - 1] === 0) newEnemyPosition = {\n          x: x - 1,\n          y\n        };\n        break;\n      case 'right':\n        if (x < cols - 1 && maze[y][x + 1] === 0) newEnemyPosition = {\n          x: x + 1,\n          y\n        };\n        break;\n      default:\n        break;\n    }\n    console.log('Moving enemy to:', newEnemyPosition);\n    this.setState({\n      enemy: newEnemyPosition\n    }, () => {\n      if (newEnemyPosition.x === cols - 2 && newEnemyPosition.y === rows - 2) {\n        this.generateAndStart();\n      }\n      if (this.state.enemy.x === this.state.player.x && this.state.enemy.y === this.state.player.y) {\n        const newMaze = this.generateMaze();\n        this.setState({\n          maze: newMaze,\n          player: {\n            x: 1,\n            y: 1\n          },\n          enemy: {\n            x: 10,\n            y: 12\n          }\n        });\n      }\n    });\n  }\n  startEnemyMovement() {\n    this.enemyMovementInterval = setInterval(() => {\n      const availableDirections = this.getAvailableDirections(this.state.enemy); // Получаем доступные направления\n      let bestDirection = this.getBestDirection(availableDirections);\n      if (bestDirection) {\n        this.moveEnemy(bestDirection);\n      }\n      if (this.state.enemy.x === this.state.player.x && this.state.enemy.y === this.state.player.y) {\n        const newMaze = this.generateMaze();\n        this.setState({\n          maze: newMaze,\n          player: {\n            x: 1,\n            y: 1\n          },\n          enemy: {\n            x: 10,\n            y: 12\n          }\n        });\n      }\n    }, 500);\n  }\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyDown);\n    this.startEnemyMovement();\n  }\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n  // Диспетчер команд ассистента\n  dispatchAssistantAction(action) {\n    console.log('dispatchAssistantAction', action);\n    if (action) {\n      switch (action.type) {\n        case 'help':\n          this.showHelp();\n          break;\n        default:\n          console.log('Unknown action type:', action.type);\n          throw new Error();\n      }\n    }\n  }\n\n  // Метод для получения доступных направлений врага\n  getAvailableDirections(enemy) {\n    const {\n      x,\n      y\n    } = enemy;\n    const maze = this.state.maze;\n    const availableDirections = [];\n    if (y > 0 && maze[y - 1][x] === 0) availableDirections.push('up');\n    if (y < rows - 1 && maze[y + 1][x] === 0) availableDirections.push('down');\n    if (x > 0 && maze[y][x - 1] === 0) availableDirections.push('left');\n    if (x < cols - 1 && maze[y][x + 1] === 0) availableDirections.push('right');\n    return availableDirections;\n  }\n\n  // Метод для выбора наилучшего направления для врага\n  getBestDirection(availableDirections) {\n    const {\n      x,\n      y\n    } = this.state.enemy;\n    const player = this.state.player;\n\n    // Для каждой доступной позиции считаем, какое направление приведет к игроку\n    let bestDirection = null;\n    let minDistance = Infinity;\n    availableDirections.forEach(direction => {\n      let newX = x;\n      let newY = y;\n      if (direction === 'up') newY -= 1;\n      if (direction === 'down') newY += 1;\n      if (direction === 'left') newX -= 1;\n      if (direction === 'right') newX += 1;\n\n      // Считаем расстояние от врага до игрока\n      const distance = Math.abs(newX - player.x) + Math.abs(newY - player.y);\n\n      // Выбираем направление с минимальным расстоянием\n      if (distance < minDistance) {\n        minDistance = distance;\n        bestDirection = direction;\n      }\n    });\n    return bestDirection;\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(MazeCanvas, {\n        maze: this.state.maze,\n        player: this.state.player,\n        enemy: this.state.enemy\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 17\n      }, this), this.state.showHelpModal && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-backdrop\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"\\u041F\\u043E\\u043C\\u043E\\u0449\\u044C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `🔹 Управление стрелочками:\n— Вверх: \"вверх\"\n— Вниз: \"вниз\"\n— Влево: \"влево\"\n— Вправо: \"вправо\"\n\n🔹 Цель:\n— Доберитесь до выхода из лабиринта\n  в правом нижнем углу.\n\n🔹 Голосом:\n— Можно использовать голосовые команды:\n\"вверх\", \"вниз\", \"влево\", \"вправо\", \"помощь\".`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.closeHelp,\n            children: \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 13\n    }, this);\n  }\n}\n;\nexport default Pong;","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","createAssistant","createSmartappDebugger","jsxDEV","_jsxDEV","initializeAssistant","getState","getRecoveryState","process","env","NODE_ENV","_process$env$REACT_AP","token","REACT_APP_TOKEN","initPhrase","REACT_APP_SMARTAPP","nativePanel","defaultText","screenshotMode","tabIndex","App","Component","constructor","props","handleKeyDown","event","key","movePlayer","showHelp","setState","showHelpModal","closeHelp","generateAndStart","console","log","maze","generateMaze","player","x","y","enemy","state","notes","id","Math","random","toString","substring","title","assistant","getStateForAssistant","on","_event$navigation","type","_event$character","character","navigation","command","navCommand","toLowerCase","dispatchAssistantAction","action","initialData","getInitialData","Array","from","length","rows","cols","fill","neighbors","push","dx","dy","floor","item_selector","items","map","index","number","direction","newPlayerPosition","newMaze","moveEnemy","newEnemyPosition","startEnemyMovement","enemyMovementInterval","setInterval","availableDirections","getAvailableDirections","bestDirection","getBestDirection","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","Error","minDistance","Infinity","forEach","newX","newY","distance","abs","render","children","MazeCanvas","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","Pong"],"sources":["C:/Users/Andrey/Downloads/pong_canvas_app/src/Pong.js"],"sourcesContent":["import React, {\r\n  useRef,\r\n  useEffect,\r\n  useState,\r\n  useCallback,\r\n} from 'react';\r\nimport { createAssistant, createSmartappDebugger } from '@salutejs/client';\r\n\r\nconst initializeAssistant = (getState, getRecoveryState) => {\r\n  if (process.env.NODE_ENV === 'development') {\r\n    return createSmartappDebugger({\r\n      token: process.env.REACT_APP_TOKEN ?? '',\r\n      initPhrase: `Запусти ${process.env.REACT_APP_SMARTAPP}`,\r\n      getState,\r\n      nativePanel: {\r\n        defaultText: '',\r\n        screenshotMode: false,\r\n        tabIndex: -1,\r\n      },\r\n    });\r\n  } else {\r\n    return createAssistant({ getState });\r\n  }\r\n};\r\n\r\nexport class App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            notes: [{ id: Math.random().toString(36).substring(7), title: 'тест' }],\r\n            player: { x: 1, y: 1 },\r\n            enemy: { x: 11, y: 12 },\r\n            maze: this.generateMaze(), // Генерация лабиринта\r\n            showHelpModal: false,\r\n        };\r\n\r\n        this.assistant = initializeAssistant(() => this.getStateForAssistant());\r\n\r\n        this.assistant.on('data', (event) => {\r\n            console.log(`assistant.on(data)`, event);\r\n            if (event.type === 'character') {\r\n                console.log(`assistant.on(data): character: \"${event?.character?.id}\"`);\r\n            } else if (event.type === 'insets') {\r\n                console.log(`assistant.on(data): insets`);\r\n            } else if (event.type === 'navigation' && event.navigation?.command) {\r\n                // Обработка навигационной команды как действия\r\n                const navCommand = event.navigation.command.toLowerCase(); // например, 'RIGHT' → 'right'\r\n                this.dispatchAssistantAction({ type: navCommand });\r\n            } else {\r\n                const { action } = event;\r\n                this.dispatchAssistantAction(action);\r\n            }\r\n        });\r\n\r\n        this.assistant.on('start', (event) => {\r\n            let initialData = this.assistant.getInitialData();\r\n            console.log(`assistant.on(start)`, event, initialData);\r\n        });\r\n\r\n        this.assistant.on('command', (event) => {\r\n            console.log(`assistant.on(command)`, event);\r\n        });\r\n\r\n        this.assistant.on('error', (event) => {\r\n            console.log(`assistant.on(error)`, event);\r\n        });\r\n\r\n        this.assistant.on('tts', (event) => {\r\n            console.log(`assistant.on(tts)`, event);\r\n        });\r\n    }\r\n\r\n    // Генерация лабиринта\r\n    generateMaze() {\r\n        console.log('Generating maze...');\r\n        const maze = Array.from({ length: rows }, () => Array(cols).fill(1));\r\n\r\n        // Метод \"Дерево бинарного\" для создания путей\r\n        for (let y = 1; y < rows; y += 2) {  // Работаем только с нечетными строками\r\n            for (let x = 1; x < cols; x += 2) {  // Работаем только с нечетными столбцами\r\n                maze[y][x] = 0;  // Делаем клетку проходимой (0)\r\n\r\n                const neighbors = [];\r\n                if (y > 1) neighbors.push([0, -1]);  // Есть клетка выше\r\n                if (x > 1) neighbors.push([-1, 0]);  // Есть клетка слева\r\n\r\n                if (neighbors.length) {\r\n                    const [dx, dy] = neighbors[Math.floor(Math.random() * neighbors.length)];\r\n                    maze[y + dy][x + dx] = 0;  // Делаем соседнюю клетку проходимой\r\n                }\r\n            }\r\n        }\r\n\r\n        // Устанавливаем начальную и конечную точки проходимыми\r\n        maze[1][1] = 0;  // Начальная позиция\r\n        maze[rows - 2][cols - 2] = 0;  // Конечная точка\r\n\r\n        console.log('Generated maze:', maze);\r\n        return maze;\r\n    }\r\n\r\n\r\n    // Проверка состояния для ассистента\r\n    getStateForAssistant() {\r\n        console.log('getStateForAssistant: this.state:', this.state);\r\n        const state = {\r\n            item_selector: {\r\n                items: this.state.notes.map(({ id, title }, index) => ({\r\n                    number: index + 1,\r\n                    id,\r\n                    title,\r\n                })),\r\n            },\r\n        };\r\n        console.log('getStateForAssistant: state:', state);\r\n        return state;\r\n    }\r\n\r\n    // Двигаем игрока\r\n    movePlayer(direction) {\r\n        const { x, y } = this.state.player;\r\n        let newPlayerPosition = { x, y };\r\n        const maze = this.state.maze;\r\n\r\n        switch (direction) {\r\n            case 'up':\r\n                if (y > 0 && maze[y - 1][x] === 0) newPlayerPosition = { x, y: y - 1 };\r\n                break;\r\n            case 'down':\r\n                if (y < rows - 1 && maze[y + 1][x] === 0) newPlayerPosition = { x, y: y + 1 };\r\n                break;\r\n            case 'left':\r\n                if (x > 0 && maze[y][x - 1] === 0) newPlayerPosition = { x: x - 1, y };\r\n                break;\r\n            case 'right':\r\n                if (x < cols - 1 && maze[y][x + 1] === 0) newPlayerPosition = { x: x + 1, y };\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        console.log('Moving player to:', newPlayerPosition);\r\n        this.setState({ player: newPlayerPosition }, () => {\r\n            //Проверка победы после обновления состояния\r\n            if (newPlayerPosition.x === cols - 2 && newPlayerPosition.y === rows - 2) {\r\n                this.generateAndStart();\r\n            }\r\n            if (\r\n                newPlayerPosition.x === this.state.enemy.x &&\r\n                newPlayerPosition.y === this.state.enemy.y\r\n            ) {\r\n                const newMaze = this.generateMaze();\r\n                this.setState({\r\n                    maze: newMaze,\r\n                    player: { x: 1, y: 1 },\r\n                    enemy: { x: 10, y: 12 }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    moveEnemy(direction) {\r\n        const { x, y } = this.state.enemy;\r\n        let newEnemyPosition = { x, y };\r\n        const maze = this.state.maze;\r\n\r\n        switch (direction) {\r\n            case 'up':\r\n                if (y > 0 && maze[y - 1][x] === 0) newEnemyPosition = { x, y: y - 1 };\r\n                break;\r\n            case 'down':\r\n                if (y < rows - 1 && maze[y + 1][x] === 0) newEnemyPosition = { x, y: y + 1 };\r\n                break;\r\n            case 'left':\r\n                if (x > 0 && maze[y][x - 1] === 0) newEnemyPosition = { x: x - 1, y };\r\n                break;\r\n            case 'right':\r\n                if (x < cols - 1 && maze[y][x + 1] === 0) newEnemyPosition = { x: x + 1, y };\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        console.log('Moving enemy to:', newEnemyPosition);\r\n        this.setState({ enemy: newEnemyPosition }, () => {\r\n            if (newEnemyPosition.x === cols - 2 && newEnemyPosition.y === rows - 2) {\r\n                this.generateAndStart();\r\n            }\r\n            if (this.state.enemy.x === this.state.player.x && this.state.enemy.y === this.state.player.y) {\r\n                const newMaze = this.generateMaze();\r\n\r\n                this.setState({\r\n                    maze: newMaze,\r\n                    player: { x: 1, y: 1 },\r\n                    enemy: { x: 10, y: 12 }\r\n                });\r\n            }\r\n\r\n        });\r\n    }\r\n    startEnemyMovement() {\r\n        this.enemyMovementInterval = setInterval(() => {\r\n            const availableDirections = this.getAvailableDirections(this.state.enemy); // Получаем доступные направления\r\n            let bestDirection = this.getBestDirection(availableDirections);\r\n\r\n            if (bestDirection) {\r\n                this.moveEnemy(bestDirection);\r\n            }\r\n\r\n            if (this.state.enemy.x === this.state.player.x && this.state.enemy.y === this.state.player.y) {\r\n                const newMaze = this.generateMaze();\r\n\r\n                this.setState({\r\n                    maze: newMaze,\r\n                    player: { x: 1, y: 1 },\r\n                    enemy: { x: 10, y: 12 }\r\n                });\r\n            }\r\n        }, 500);\r\n    }\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.handleKeyDown);\r\n        this.startEnemyMovement();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.handleKeyDown);\r\n    }\r\n\r\n    handleKeyDown = (event) => {\r\n        switch (event.key) {\r\n            case 'ArrowUp':\r\n                this.movePlayer('up');\r\n                break;\r\n            case 'ArrowDown':\r\n                this.movePlayer('down');\r\n                break;\r\n            case 'ArrowLeft':\r\n                this.movePlayer('left');\r\n                break;\r\n            case 'ArrowRight':\r\n                this.movePlayer('right');\r\n                break;\r\n            case 'h':\r\n            case 'H':\r\n                this.showHelp();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n\r\n    showHelp = () => {\r\n        this.setState({ showHelpModal: true });\r\n    };\r\n\r\n    closeHelp = () => {\r\n        this.setState({ showHelpModal: false });\r\n    };\r\n\r\n\r\n\r\n    // Генерация нового лабиринта и начало игры\r\n    generateAndStart = () => {\r\n        console.log('Generating new maze and restarting...');\r\n        this.setState({ maze: this.generateMaze(), player: { x: 1, y: 1 }, enemy: { x: 10, y: 12 } });\r\n    };\r\n\r\n    // Диспетчер команд ассистента\r\n    dispatchAssistantAction(action) {\r\n        console.log('dispatchAssistantAction', action);\r\n        if (action) {\r\n            switch (action.type) {\r\n                case 'help':\r\n                    this.showHelp();\r\n                    break\r\n\r\n\r\n                default:\r\n                    console.log('Unknown action type:', action.type);\r\n                    throw new Error();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    // Метод для получения доступных направлений врага\r\n    getAvailableDirections(enemy) {\r\n        const { x, y } = enemy;\r\n        const maze = this.state.maze;\r\n        const availableDirections = [];\r\n\r\n        if (y > 0 && maze[y - 1][x] === 0) availableDirections.push('up');\r\n        if (y < rows - 1 && maze[y + 1][x] === 0) availableDirections.push('down');\r\n        if (x > 0 && maze[y][x - 1] === 0) availableDirections.push('left');\r\n        if (x < cols - 1 && maze[y][x + 1] === 0) availableDirections.push('right');\r\n\r\n        return availableDirections;\r\n    }\r\n\r\n    // Метод для выбора наилучшего направления для врага\r\n    getBestDirection(availableDirections) {\r\n        const { x, y } = this.state.enemy;\r\n        const player = this.state.player;\r\n\r\n        // Для каждой доступной позиции считаем, какое направление приведет к игроку\r\n        let bestDirection = null;\r\n        let minDistance = Infinity;\r\n\r\n        availableDirections.forEach(direction => {\r\n            let newX = x;\r\n            let newY = y;\r\n\r\n            if (direction === 'up') newY -= 1;\r\n            if (direction === 'down') newY += 1;\r\n            if (direction === 'left') newX -= 1;\r\n            if (direction === 'right') newX += 1;\r\n\r\n            // Считаем расстояние от врага до игрока\r\n            const distance = Math.abs(newX - player.x) + Math.abs(newY - player.y);\r\n\r\n            // Выбираем направление с минимальным расстоянием\r\n            if (distance < minDistance) {\r\n                minDistance = distance;\r\n                bestDirection = direction;\r\n            }\r\n        });\r\n\r\n        return bestDirection;\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <MazeCanvas\r\n                    maze={this.state.maze}\r\n                    player={this.state.player}\r\n                    enemy={this.state.enemy}\r\n                />\r\n\r\n                {this.state.showHelpModal && (\r\n                    <div className=\"modal-backdrop\">\r\n                        <div className=\"modal-content\">\r\n                            <h2>Помощь</h2>\r\n                            <pre>\r\n                                {`🔹 Управление стрелочками:\r\n— Вверх: \"вверх\"\r\n— Вниз: \"вниз\"\r\n— Влево: \"влево\"\r\n— Вправо: \"вправо\"\r\n\r\n🔹 Цель:\r\n— Доберитесь до выхода из лабиринта\r\n  в правом нижнем углу.\r\n\r\n🔹 Голосом:\r\n— Можно использовать голосовые команды:\r\n\"вверх\", \"вниз\", \"влево\", \"вправо\", \"помощь\".`}\r\n                            </pre>\r\n                            <button onClick={this.closeHelp}>Закрыть</button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Pong;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}