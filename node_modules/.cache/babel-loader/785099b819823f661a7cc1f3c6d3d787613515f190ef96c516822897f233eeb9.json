{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { createAssistantClient } from '@salutejs/client';\nconst VoiceControl = ({\n  onStart,\n  onPause,\n  onStop\n}) => {\n  _s();\n  useEffect(() => {\n    // Создание клиента для взаимодействия с голосовыми командами\n    const client = createAssistantClient({\n      // Пример конфигурации клиента, если это необходимо\n      meta: {\n        appName: 'PongGame' // Название приложения, которое может понадобиться\n      }\n    });\n\n    // Обработчик голосовых команд\n    const handleCommand = command => {\n      switch (command.command) {\n        case 'play':\n          onStart(); // Начало игры\n          break;\n        case 'pause':\n          onPause(); // Пауза игры\n          break;\n        case 'stop':\n          onStop(); // Остановка игры\n          break;\n        default:\n          break;\n      }\n    };\n\n    // Привязка обработчика команд\n    client.on('command', handleCommand);\n\n    // Старт клиента\n    client.start();\n\n    // Очистка при размонтировании компонента\n    return () => {\n      client.off('command', handleCommand); // Отписка от события команд\n      client.stop(); // Остановка клиента\n    };\n  }, [onStart, onPause, onStop]);\n  return null;\n};\n_s(VoiceControl, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = VoiceControl;\nexport default VoiceControl;\nvar _c;\n$RefreshReg$(_c, \"VoiceControl\");","map":{"version":3,"names":["React","useEffect","createAssistantClient","VoiceControl","onStart","onPause","onStop","_s","client","meta","appName","handleCommand","command","on","start","off","stop","_c","$RefreshReg$"],"sources":["C:/Users/Andrey/Downloads/pong_canvas_app/src/VoiceControl.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { createAssistantClient } from '@salutejs/client';\r\n\r\nconst VoiceControl = ({ onStart, onPause, onStop }) => {\r\n  useEffect(() => {\r\n    // Создание клиента для взаимодействия с голосовыми командами\r\n    const client = createAssistantClient({\r\n      // Пример конфигурации клиента, если это необходимо\r\n      meta: {\r\n        appName: 'PongGame',  // Название приложения, которое может понадобиться\r\n      },\r\n    });\r\n\r\n    // Обработчик голосовых команд\r\n    const handleCommand = (command) => {\r\n      switch (command.command) {\r\n        case 'play':\r\n          onStart();  // Начало игры\r\n          break;\r\n        case 'pause':\r\n          onPause();  // Пауза игры\r\n          break;\r\n        case 'stop':\r\n          onStop();  // Остановка игры\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    // Привязка обработчика команд\r\n    client.on('command', handleCommand);\r\n\r\n    // Старт клиента\r\n    client.start();\r\n\r\n    // Очистка при размонтировании компонента\r\n    return () => {\r\n      client.off('command', handleCommand);  // Отписка от события команд\r\n      client.stop();  // Остановка клиента\r\n    };\r\n  }, [onStart, onPause, onStop]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default VoiceControl;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,qBAAqB,QAAQ,kBAAkB;AAExD,MAAMC,YAAY,GAAGA,CAAC;EAAEC,OAAO;EAAEC,OAAO;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACrDN,SAAS,CAAC,MAAM;IACd;IACA,MAAMO,MAAM,GAAGN,qBAAqB,CAAC;MACnC;MACAO,IAAI,EAAE;QACJC,OAAO,EAAE,UAAU,CAAG;MACxB;IACF,CAAC,CAAC;;IAEF;IACA,MAAMC,aAAa,GAAIC,OAAO,IAAK;MACjC,QAAQA,OAAO,CAACA,OAAO;QACrB,KAAK,MAAM;UACTR,OAAO,CAAC,CAAC,CAAC,CAAE;UACZ;QACF,KAAK,OAAO;UACVC,OAAO,CAAC,CAAC,CAAC,CAAE;UACZ;QACF,KAAK,MAAM;UACTC,MAAM,CAAC,CAAC,CAAC,CAAE;UACX;QACF;UACE;MACJ;IACF,CAAC;;IAED;IACAE,MAAM,CAACK,EAAE,CAAC,SAAS,EAAEF,aAAa,CAAC;;IAEnC;IACAH,MAAM,CAACM,KAAK,CAAC,CAAC;;IAEd;IACA,OAAO,MAAM;MACXN,MAAM,CAACO,GAAG,CAAC,SAAS,EAAEJ,aAAa,CAAC,CAAC,CAAE;MACvCH,MAAM,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAE;IAClB,CAAC;EACH,CAAC,EAAE,CAACZ,OAAO,EAAEC,OAAO,EAAEC,MAAM,CAAC,CAAC;EAE9B,OAAO,IAAI;AACb,CAAC;AAACC,EAAA,CAzCIJ,YAAY;AAAAc,EAAA,GAAZd,YAAY;AA2ClB,eAAeA,YAAY;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}