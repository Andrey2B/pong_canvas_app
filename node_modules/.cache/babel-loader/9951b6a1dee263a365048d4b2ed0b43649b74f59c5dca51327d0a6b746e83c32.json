{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrey\\\\Downloads\\\\pong_canvas_app\\\\src\\\\Pong.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Pong = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [ballSpeedX, setBallSpeedX] = useState(4);\n  const [ballSpeedY, setBallSpeedY] = useState(4);\n  const [ballPosX, setBallPosX] = useState(400); // Start at center\n  const [ballPosY, setBallPosY] = useState(300); // Start at center\n  const [paddle1Y, setPaddle1Y] = useState(150);\n  const [paddle2Y, setPaddle2Y] = useState(150);\n  const [score1, setScore1] = useState(0);\n  const [score2, setScore2] = useState(0);\n  const [difficulty, setDifficulty] = useState('easy'); // 'easy' or 'hard'\n  const [gameOver, setGameOver] = useState(false); // Flag for game over\n  const [winner, setWinner] = useState(null); // Winner player\n\n  const paddleHeight = 100;\n  const paddleSpeed = 30;\n  const botSpeed = difficulty === 'easy' ? 3 : 6; // Bot speed depends on difficulty\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const interval = setInterval(updateGame, 1000 / 60); // 60 FPS\n\n    function updateGame() {\n      if (!gameOver) {\n        moveBall();\n        detectCollisions();\n        moveBotPaddle();\n        draw();\n      }\n    }\n    function moveBall() {\n      if (ballPosX + ballSpeedX > canvas.width || ballPosX + ballSpeedX < 0) {\n        if (ballPosX + ballSpeedX > canvas.width) {\n          setScore1(prev => prev + 1);\n        } else {\n          setScore2(prev => prev + 1);\n        }\n\n        // Reset ball to center after scoring\n        setBallPosX(canvas.width / 2);\n        setBallPosY(canvas.height / 2);\n        setBallSpeedX(prev => -prev); // Reverse ball direction\n        setBallSpeedY(prev => Math.random() > 0.5 ? 4 : -4); // Randomize Y speed after goal\n\n        // Check if game over (10 points)\n        if (score1 === 9 || score2 === 9) {\n          setGameOver(true);\n          setWinner(score1 === 10 ? 'Player 1' : 'Player 2');\n        }\n      }\n      if (ballPosY + ballSpeedY > canvas.height || ballPosY + ballSpeedY < 0) {\n        setBallSpeedY(prev => -prev); // Ball bounces off top and bottom walls\n      }\n      setBallPosX(prev => prev + ballSpeedX);\n      setBallPosY(prev => prev + ballSpeedY);\n    }\n    function detectCollisions() {\n      // Left paddle (Player 1)\n      if (ballPosX < 10 && ballPosY > paddle1Y && ballPosY < paddle1Y + paddleHeight) {\n        // Calculate angle based on where the ball hits the paddle\n        let relativeIntersectY = ballPosY - (paddle1Y + paddleHeight / 2);\n        let normalizedRelativeIntersectionY = relativeIntersectY / (paddleHeight / 2);\n        let bounceAngle = normalizedRelativeIntersectionY * Math.PI / 4; // Angle between -45 and 45 degrees\n\n        // Update ball speed based on angle\n        setBallSpeedX(prev => -prev * 1.1); // Slightly increase speed after hitting paddle\n        setBallSpeedY(Math.sin(bounceAngle) * 4); // Set new vertical speed based on angle\n      }\n\n      // Right paddle (Bot or Player 2)\n      if (ballPosX > canvas.width - 10 && ballPosY > paddle2Y && ballPosY < paddle2Y + paddleHeight) {\n        // Calculate angle based on where the ball hits the paddle\n        let relativeIntersectY = ballPosY - (paddle2Y + paddleHeight / 2);\n        let normalizedRelativeIntersectionY = relativeIntersectY / (paddleHeight / 2);\n        let bounceAngle = normalizedRelativeIntersectionY * Math.PI / 4; // Angle between -45 and 45 degrees\n\n        // Update ball speed based on angle\n        setBallSpeedX(prev => -prev * 1.1); // Slightly increase speed after hitting paddle\n        setBallSpeedY(Math.sin(bounceAngle) * 4); // Set new vertical speed based on angle\n      }\n    }\n    function draw() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Draw ball\n      ctx.beginPath();\n      ctx.arc(ballPosX, ballPosY, 10, 0, Math.PI * 2);\n      ctx.fill();\n\n      // Draw paddles\n      ctx.fillStyle = 'white';\n      ctx.fillRect(0, paddle1Y, 10, paddleHeight); // Left paddle (Player)\n      ctx.fillRect(canvas.width - 10, paddle2Y, 10, paddleHeight); // Right paddle (Bot)\n\n      // Draw scores\n      ctx.font = '30px Arial';\n      ctx.fillText(score1, canvas.width / 4, 30);\n      ctx.fillText(score2, canvas.width / 4 * 3, 30);\n\n      // If game over, show winner\n      if (gameOver) {\n        ctx.font = '40px Arial';\n        ctx.fillText(`${winner} Wins!`, canvas.width / 2 - 100, canvas.height / 2);\n      }\n    }\n    function movePaddle(event) {\n      if (event.key === 'ArrowUp' && paddle1Y > 0) {\n        setPaddle1Y(prev => prev - paddleSpeed);\n      }\n      if (event.key === 'ArrowDown' && paddle1Y + paddleHeight < canvas.height) {\n        setPaddle1Y(prev => prev + paddleSpeed);\n      }\n    }\n\n    // Bot paddle AI (simple following)\n    function moveBotPaddle() {\n      if (ballPosY > paddle2Y + paddleHeight / 2) {\n        setPaddle2Y(prev => Math.min(prev + botSpeed, canvas.height - paddleHeight));\n      } else if (ballPosY < paddle2Y + paddleHeight / 2) {\n        setPaddle2Y(prev => Math.max(prev - botSpeed, 0));\n      }\n    }\n    window.addEventListener('keydown', movePaddle);\n    return () => {\n      clearInterval(interval);\n      window.removeEventListener('keydown', movePaddle);\n    };\n  }, [ballPosX, ballPosY, ballSpeedX, ballSpeedY, paddle1Y, paddle2Y, score1, score2, difficulty, gameOver]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: \"800\",\n      height: \"600\",\n      tabIndex: \"0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), !gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setDifficulty('easy'),\n        children: \"Easy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setDifficulty('hard'),\n        children: \"Hard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s(Pong, \"qIU14Pp816F9G4vrR50qsFIgsKc=\");\n_c = Pong;\nexport default Pong;\nvar _c;\n$RefreshReg$(_c, \"Pong\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","Pong","_s","canvasRef","ballSpeedX","setBallSpeedX","ballSpeedY","setBallSpeedY","ballPosX","setBallPosX","ballPosY","setBallPosY","paddle1Y","setPaddle1Y","paddle2Y","setPaddle2Y","score1","setScore1","score2","setScore2","difficulty","setDifficulty","gameOver","setGameOver","winner","setWinner","paddleHeight","paddleSpeed","botSpeed","canvas","current","ctx","getContext","interval","setInterval","updateGame","moveBall","detectCollisions","moveBotPaddle","draw","width","prev","height","Math","random","relativeIntersectY","normalizedRelativeIntersectionY","bounceAngle","PI","sin","clearRect","beginPath","arc","fill","fillStyle","fillRect","font","fillText","movePaddle","event","key","min","max","window","addEventListener","clearInterval","removeEventListener","children","ref","tabIndex","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","marginTop","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Andrey/Downloads/pong_canvas_app/src/Pong.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\n\r\nconst Pong = () => {\r\n  const canvasRef = useRef(null);\r\n  const [ballSpeedX, setBallSpeedX] = useState(4);\r\n  const [ballSpeedY, setBallSpeedY] = useState(4);\r\n  const [ballPosX, setBallPosX] = useState(400); // Start at center\r\n  const [ballPosY, setBallPosY] = useState(300); // Start at center\r\n  const [paddle1Y, setPaddle1Y] = useState(150);\r\n  const [paddle2Y, setPaddle2Y] = useState(150);\r\n  const [score1, setScore1] = useState(0);\r\n  const [score2, setScore2] = useState(0);\r\n  const [difficulty, setDifficulty] = useState('easy'); // 'easy' or 'hard'\r\n  const [gameOver, setGameOver] = useState(false); // Flag for game over\r\n  const [winner, setWinner] = useState(null); // Winner player\r\n\r\n  const paddleHeight = 100;\r\n  const paddleSpeed = 30;\r\n  const botSpeed = difficulty === 'easy' ? 3 : 6; // Bot speed depends on difficulty\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const interval = setInterval(updateGame, 1000 / 60); // 60 FPS\r\n\r\n    function updateGame() {\r\n      if (!gameOver) {\r\n        moveBall();\r\n        detectCollisions();\r\n        moveBotPaddle();\r\n        draw();\r\n      }\r\n    }\r\n\r\n    function moveBall() {\r\n      if (ballPosX + ballSpeedX > canvas.width || ballPosX + ballSpeedX < 0) {\r\n        if (ballPosX + ballSpeedX > canvas.width) {\r\n          setScore1(prev => prev + 1);\r\n        } else {\r\n          setScore2(prev => prev + 1);\r\n        }\r\n        \r\n        // Reset ball to center after scoring\r\n        setBallPosX(canvas.width / 2);\r\n        setBallPosY(canvas.height / 2);\r\n        setBallSpeedX(prev => -prev); // Reverse ball direction\r\n        setBallSpeedY(prev => (Math.random() > 0.5 ? 4 : -4)); // Randomize Y speed after goal\r\n\r\n        // Check if game over (10 points)\r\n        if (score1 === 9 || score2 === 9) {\r\n          setGameOver(true);\r\n          setWinner(score1 === 10 ? 'Player 1' : 'Player 2');\r\n        }\r\n      }\r\n\r\n      if (ballPosY + ballSpeedY > canvas.height || ballPosY + ballSpeedY < 0) {\r\n        setBallSpeedY(prev => -prev); // Ball bounces off top and bottom walls\r\n      }\r\n\r\n      setBallPosX(prev => prev + ballSpeedX);\r\n      setBallPosY(prev => prev + ballSpeedY);\r\n    }\r\n\r\n    function detectCollisions() {\r\n      // Left paddle (Player 1)\r\n      if (ballPosX < 10 && ballPosY > paddle1Y && ballPosY < paddle1Y + paddleHeight) {\r\n        // Calculate angle based on where the ball hits the paddle\r\n        let relativeIntersectY = ballPosY - (paddle1Y + paddleHeight / 2);\r\n        let normalizedRelativeIntersectionY = relativeIntersectY / (paddleHeight / 2);\r\n        let bounceAngle = normalizedRelativeIntersectionY * Math.PI / 4; // Angle between -45 and 45 degrees\r\n\r\n        // Update ball speed based on angle\r\n        setBallSpeedX(prev => -prev * 1.1); // Slightly increase speed after hitting paddle\r\n        setBallSpeedY(Math.sin(bounceAngle) * 4); // Set new vertical speed based on angle\r\n      }\r\n\r\n      // Right paddle (Bot or Player 2)\r\n      if (ballPosX > canvas.width - 10 && ballPosY > paddle2Y && ballPosY < paddle2Y + paddleHeight) {\r\n        // Calculate angle based on where the ball hits the paddle\r\n        let relativeIntersectY = ballPosY - (paddle2Y + paddleHeight / 2);\r\n        let normalizedRelativeIntersectionY = relativeIntersectY / (paddleHeight / 2);\r\n        let bounceAngle = normalizedRelativeIntersectionY * Math.PI / 4; // Angle between -45 and 45 degrees\r\n\r\n        // Update ball speed based on angle\r\n        setBallSpeedX(prev => -prev * 1.1); // Slightly increase speed after hitting paddle\r\n        setBallSpeedY(Math.sin(bounceAngle) * 4); // Set new vertical speed based on angle\r\n      }\r\n    }\r\n\r\n    function draw() {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      // Draw ball\r\n      ctx.beginPath();\r\n      ctx.arc(ballPosX, ballPosY, 10, 0, Math.PI * 2);\r\n      ctx.fill();\r\n\r\n      // Draw paddles\r\n      ctx.fillStyle = 'white';\r\n      ctx.fillRect(0, paddle1Y, 10, paddleHeight); // Left paddle (Player)\r\n      ctx.fillRect(canvas.width - 10, paddle2Y, 10, paddleHeight); // Right paddle (Bot)\r\n\r\n      // Draw scores\r\n      ctx.font = '30px Arial';\r\n      ctx.fillText(score1, canvas.width / 4, 30);\r\n      ctx.fillText(score2, (canvas.width / 4) * 3, 30);\r\n\r\n      // If game over, show winner\r\n      if (gameOver) {\r\n        ctx.font = '40px Arial';\r\n        ctx.fillText(`${winner} Wins!`, canvas.width / 2 - 100, canvas.height / 2);\r\n      }\r\n    }\r\n\r\n    function movePaddle(event) {\r\n      if (event.key === 'ArrowUp' && paddle1Y > 0) {\r\n        setPaddle1Y(prev => prev - paddleSpeed);\r\n      }\r\n      if (event.key === 'ArrowDown' && paddle1Y + paddleHeight < canvas.height) {\r\n        setPaddle1Y(prev => prev + paddleSpeed);\r\n      }\r\n    }\r\n\r\n    // Bot paddle AI (simple following)\r\n    function moveBotPaddle() {\r\n      if (ballPosY > paddle2Y + paddleHeight / 2) {\r\n        setPaddle2Y(prev => Math.min(prev + botSpeed, canvas.height - paddleHeight));\r\n      } else if (ballPosY < paddle2Y + paddleHeight / 2) {\r\n        setPaddle2Y(prev => Math.max(prev - botSpeed, 0));\r\n      }\r\n    }\r\n\r\n    window.addEventListener('keydown', movePaddle);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n      window.removeEventListener('keydown', movePaddle);\r\n    };\r\n  }, [ballPosX, ballPosY, ballSpeedX, ballSpeedY, paddle1Y, paddle2Y, score1, score2, difficulty, gameOver]);\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={canvasRef} width=\"800\" height=\"600\" tabIndex=\"0\" />\r\n      {!gameOver && (\r\n        <div style={{ textAlign: 'center', marginTop: '20px' }}>\r\n          <button onClick={() => setDifficulty('easy')}>Easy</button>\r\n          <button onClick={() => setDifficulty('hard')}>Hard</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pong;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}